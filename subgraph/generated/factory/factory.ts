// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class SavingsCreated extends ethereum.Event {
  get params(): SavingsCreated__Params {
    return new SavingsCreated__Params(this);
  }
}

export class SavingsCreated__Params {
  _event: SavingsCreated;

  constructor(event: SavingsCreated) {
    this._event = event;
  }

  get creator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get savings(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get whitelistTokens(): Array<Address> {
    return this._event.parameters[2].value.toAddressArray();
  }

  get tokenDistribution(): Array<SavingsCreatedTokenDistributionStruct> {
    return this._event.parameters[3].value.toTupleArray<
      SavingsCreatedTokenDistributionStruct
    >();
  }
}

export class SavingsCreatedTokenDistributionStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get distribution(): i32 {
    return this[1].toI32();
  }
}

export class factory extends ethereum.SmartContract {
  static bind(address: Address): factory {
    return new factory("factory", address);
  }

  link(): Address {
    let result = super.call("link", "link():(address)", []);

    return result[0].toAddress();
  }

  try_link(): ethereum.CallResult<Address> {
    let result = super.tryCall("link", "link():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  registrar(): Address {
    let result = super.call("registrar", "registrar():(address)", []);

    return result[0].toAddress();
  }

  try_registrar(): ethereum.CallResult<Address> {
    let result = super.tryCall("registrar", "registrar():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _swapProxy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateCall extends ethereum.Call {
  get inputs(): CreateCall__Inputs {
    return new CreateCall__Inputs(this);
  }

  get outputs(): CreateCall__Outputs {
    return new CreateCall__Outputs(this);
  }
}

export class CreateCall__Inputs {
  _call: CreateCall;

  constructor(call: CreateCall) {
    this._call = call;
  }

  get _whitelistTokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _tokenDistribution(): Array<CreateCall_tokenDistributionStruct> {
    return this._call.inputValues[1].value.toTupleArray<
      CreateCall_tokenDistributionStruct
    >();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class CreateCall__Outputs {
  _call: CreateCall;

  constructor(call: CreateCall) {
    this._call = call;
  }
}

export class CreateCall_tokenDistributionStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get distribution(): i32 {
    return this[1].toI32();
  }
}
